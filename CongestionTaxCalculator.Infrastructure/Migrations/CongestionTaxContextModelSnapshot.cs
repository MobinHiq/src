// <auto-generated />
using System;
using CongestionTaxCalculator.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CongestionTaxCalculator.Infrastructure.Migrations
{
    [DbContext(typeof(CongestionTaxContext))]
    partial class CongestionTaxContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("CongestionTaxCalculator.Domain.Entities.TaxRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TaxRules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 8m,
                            City = "Gothenburg",
                            EndTime = new TimeSpan(0, 6, 29, 59, 0),
                            StartTime = new TimeSpan(0, 6, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            Amount = 13m,
                            City = "Gothenburg",
                            EndTime = new TimeSpan(0, 6, 59, 59, 0),
                            StartTime = new TimeSpan(0, 6, 30, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            Amount = 18m,
                            City = "Gothenburg",
                            EndTime = new TimeSpan(0, 7, 59, 59, 0),
                            StartTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            Amount = 13m,
                            City = "Gothenburg",
                            EndTime = new TimeSpan(0, 8, 29, 59, 0),
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            Amount = 8m,
                            City = "Gothenburg",
                            EndTime = new TimeSpan(0, 14, 59, 59, 0),
                            StartTime = new TimeSpan(0, 8, 30, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            Amount = 13m,
                            City = "Gothenburg",
                            EndTime = new TimeSpan(0, 15, 29, 59, 0),
                            StartTime = new TimeSpan(0, 15, 0, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            Amount = 18m,
                            City = "Gothenburg",
                            EndTime = new TimeSpan(0, 16, 59, 59, 0),
                            StartTime = new TimeSpan(0, 15, 30, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            Amount = 13m,
                            City = "Gothenburg",
                            EndTime = new TimeSpan(0, 17, 59, 59, 0),
                            StartTime = new TimeSpan(0, 17, 0, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            Amount = 8m,
                            City = "Gothenburg",
                            EndTime = new TimeSpan(0, 18, 29, 59, 0),
                            StartTime = new TimeSpan(0, 18, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
